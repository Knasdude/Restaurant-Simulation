package org.example;

public class SousChef implements Chef, ChefObserver{
    private int x;
    private int y;
    private int walkSpeed;
    private final int diameter;
    private final int baseX = 150;
    private final int baseY = 380;
    private MasterChef masterChef;
    private long waitTimer;

    private SousChefStatus status = SousChefStatus.IDLE;

    public enum SousChefStatus{ //FIXA ENUM VARIABLES
        IDLE, WALKING_TO_MASTER_CHEF, RECEIVING_ORDER, WALKING_TO_STATION, COOKING,
    }

    public SousChef(int x, int y) {
        this.x = x;
        this.y = y;
        this.diameter = 40;
        this.walkSpeed = 5;
    }

    public SousChefStatus getSousChefStatus(){
        return status;
    }

    public void setStatus(SousChefStatus newSousChefStatus){
        this.status = newSousChefStatus;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public int getDiameter() {
        return diameter;
    }

    @Override
    public void update(String order) {
        System.out.println("PrepChef received order: " + order);
        this.setStatus(SousChefStatus.COOKING);
        // ev. börja röra sig etc
    }

    //ALLT HÄRIFRÅN

    public int masterChefPosX(MasterChef masterChef){
        return masterChef.getX();
    }

    public int masterChefPosY(MasterChef masterChef){
        return masterChef.getY();
    }

    public boolean isAtMasterChef(){
        return (Math.abs(x - masterChefPosX(masterChef)) <= walkSpeed) && (Math.abs(y - masterChefPosY(masterChef)) <= walkSpeed);
    }

    public boolean isChefAtBase(){
        return (Math.abs(x - baseX) <= walkSpeed) && (Math.abs(y - baseY) <= walkSpeed);
    }

    public long getWaitTimer(){
        return waitTimer;
    }

    public void walkTo(MasterChef masterChef) throws InterruptedException {

        int MasterChefPosX = masterChefPosX(masterChef);
        int MasterChefPosY = masterChefPosY(masterChef);
        walkSpeed = 5;

        if (x < MasterChefPosX) {
            x += walkSpeed;
            //System.out.println("Waiter påväg till bord");
        } else if (x > MasterChefPosX) {
            x -= walkSpeed;
        }

        if (y < MasterChefPosY) {
            y += walkSpeed;
            //System.out.println("Waiter påväg till bord");
        } else if (y > MasterChefPosY) {
            y -= walkSpeed;
        }

        if (isAtMasterChef()) {
            setStatus(SousChefStatus.RECEIVING_ORDER);
            waitTimer = System.currentTimeMillis();

        }
    }

    //TILL HIT

    public void walkToBase() {
        if (x < baseX) {
            this.x = this.x + walkSpeed;
        } else if (this.x > baseX) {
            this.x = this.x - walkSpeed; //walkspeed = 5
            //System.out.println(this.x);
        }

        if (this.y < baseY) {
            this.y = this.y + walkSpeed;
        } else if (this.y > baseY) {
            this.y = this.y - walkSpeed;
            //System.out.println(this.y);
        }
    }
}
