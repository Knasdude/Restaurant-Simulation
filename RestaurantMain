package org.example;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import java.util.Random;

/**
 * Main class representing the restaurant simulation.
 * Manages the graphical user interface, restaurant entities like tables, chefs, waiters, customers,
 * and the simulation logic such as order processing and movement.
 */

public class RestaurantMain extends JPanel {
    /**
     * Boolean to control visibility of message bubbles in the UI
     */
    static boolean showMessage = false;
    //static Timer tableMessageOrderTimer;
    static HashMap <Table, ArrayList<String>> tableOrders = new HashMap<>();

    private static HashMap<Table, Integer> processedCustomerCountMap = new HashMap<>();


    /**
     * Flag to control visibility of message bubbles text in the UI
     */
    static boolean showTableMessageOrder = false;

    /**
     * Timer controlling how long messages are displayed.
     */
    static Timer messageTimer;

    /**
     * Timestamp for the last time a table was added to the queue.
     */
    static long lastTableTimeAdd = 0;

    /**
     * delay in milliseconds between adding new tables to the queue.
     */

    static final long tableAddDelay = 10000;

    /**
     * List of waiters currently in the restaurant.
     */
    static ArrayList<Waiter> waiters = new ArrayList<Waiter>();

    /**
     * List of tables in the restaurant.
     */
    static ArrayList<Table> tables = new ArrayList<Table>();

    /**
     * List of customers in the restaurant.
     */
    static ArrayList<Customer> customers = new ArrayList<Customer>();

    /**
     * List of messages used in the restaurant.
     */
    static ArrayList<Message> messages = new ArrayList<Message>();

    /**
     * List of chefs in the restaurant.
     */
    static ArrayList<Chef> chefs = new ArrayList<>();

    /**
    * Specific chef instances
    */

    static MasterChef masterChef;
    static SousChef sousChef;
    static PrepChef prepChef;
    static PastryChef pastryChef;
    static AppetizerChef appetizerChef;

    /**
     * Queue of table numbers waiting for service.
     */
    static ArrayList<Integer> TableQueue = new ArrayList<Integer>();

    /**
     * Initializes and sets up all restaurant entities such as tables, chefs, waiters, and customers.
     * Also sets up observers for the master chef
     */
    static void setupRestaurant() {

        waiters.add(new Waiter(520,300 ));
        masterChef = MasterChef.getInstance();
        sousChef = new SousChef(150, 380, masterChef);
        prepChef = new PrepChef(80,80, masterChef);
        pastryChef = new PastryChef(290, 80, masterChef);
        appetizerChef = new AppetizerChef(390, 500, masterChef);

        chefs.add(sousChef);
        chefs.add(prepChef);
        chefs.add(pastryChef);
        chefs.add(appetizerChef);

        //Tables on the upper part of restaurant
        tables.add(new Table(1000, 20, "1"));//
        tables.add(new Table(850, 20, "2"));
        tables.add(new Table(700, 20, "3"));

        ////Tables on the bottom part of restaurant
        tables.add(new Table(1000, 500, "4"));
        tables.add(new Table(850, 500, "5"));
        tables.add(new Table(700, 500, "6"));

        Customer customer1 = new Customer(tables.get(0));
        Customer customer2 = new Customer(tables.get(1));
        Customer customer3 = new Customer(tables.get(1));
        Customer customer4 = new Customer(tables.get(2));
        Customer customer5 = new Customer(tables.get(3));
        Customer customer6 = new Customer(tables.get(4));

        tables.get(0).addCustomer(customer1);
        tables.get(1).addCustomer(customer2);
        tables.get(1).addCustomer(customer3);
        tables.get(2).addCustomer(customer4);
        tables.get(3).addCustomer(customer5);
        tables.get(4).addCustomer(customer6);

        customers.add(customer1);
        customers.add(customer2);
        customers.add(customer3);
        customers.add(customer4);
        customers.add(customer5);
        customers.add(customer6);

        /*
        In order to test customerLimitCheck:
        Customer customer7 = new Customer(tables.get(0));
        Customer customer8 = new Customer(tables.get(0));
        Customer customer9 = new Customer(tables.get(0));
        Customer customer10 = new Customer(tables.get(0));
        Customer customer11 = new Customer(tables.get(0));

        customers.add(customer7);
        customers.add(customer8);
        customers.add(customer9);
        customers.add(customer10);
        customers.add(customer11);
         */

        //Adding customerCount for all tables
        for (Customer customer: customers){
            Table currentTable = customer.getTable();
            currentTable.addCustomerCount();
        }

        //Checking the customerLimit for all tables
        for (Table table: tables){
            table.customerLimitCheck();
        }

        //Printing out the number of customers per table
        for (int i = 1; i<=6; i++){
            System.out.println("At table " + i + " number of customers:" + tables.get(i-1).getNumberCustomers());
        }

        messages.add(new Message(Message.getX(waiters.get(0)), Message.getY(waiters.get(0))));

        masterChef.addObserver(sousChef);
        masterChef.addObserver(prepChef);
        masterChef.addObserver(pastryChef);
        masterChef.addObserver(appetizerChef);

        TableQueue.add(1);
    }


    /**
     * Updates the simulation state, including chef activities, waiter movements, message bubble and customers
     * order processing, and table queue.
     *
     * @throws InterruptedException if thread sleep is interrupted
     */
    static void update() throws InterruptedException {


        //Logic for repetedly adding a table to tableQueue
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastTableTimeAdd >= tableAddDelay) {
            //int randomTableInt = (int) (Math.random() * 6);
            //TableQueue.add(randomTableInt);
            lastTableTimeAdd = currentTime;
        }

        for (Chef chef : chefs) {
            if (!pastryChef.getCookingList().isEmpty()) {
                if ((pastryChef.getPastryChefStatus() == PastryChef.PastryChefStatus.IDLE)) {
                    pastryChef.setStatus(PastryChef.PastryChefStatus.WALKING_TO_MASTER_CHEF);
                }

                if ((pastryChef.getPastryChefStatus() == PastryChef.PastryChefStatus.WALKING_TO_MASTER_CHEF)) {
                    pastryChef.walkTo(masterChef);
                }

                if ((pastryChef.isAtMasterChef() && pastryChef.getPastryChefStatus() == PastryChef.PastryChefStatus.WALKING_TO_MASTER_CHEF)) {
                    pastryChef.resetWaitTimer();
                }

                if (pastryChef.isAtMasterChef()) {
                    pastryChef.setStatus(PastryChef.PastryChefStatus.RECEIVING_ORDER);
                }

                if (pastryChef.getPastryChefStatus() == PastryChef.PastryChefStatus.RECEIVING_ORDER) {
                    if (currentTime - pastryChef.getWaitTimer() >= 2000) {
                        pastryChef.setStatus(PastryChef.PastryChefStatus.WALKING_TO_STATION);
                    }
                }

                if (pastryChef.getPastryChefStatus() == PastryChef.PastryChefStatus.WALKING_TO_STATION) {
                    pastryChef.walkToBase();
                    if (pastryChef.isChefAtBase() && (!pastryChef.getCookingList().isEmpty())) {
                        pastryChef.setStatus(PastryChef.PastryChefStatus.IDLE);
                    }
                }

                if (pastryChef.getCookingList().isEmpty()) {
                    pastryChef.setStatus(PastryChef.PastryChefStatus.IDLE);
                }
            }
        }


        if (!(waiters.get(0).getCurrentTable() == null)) {

            Waiter waiter = waiters.get(0);
            Table customersTable = waiter.getCurrentTable();

            int amountOrderedCustomers = processedCustomerCountMap.getOrDefault(customersTable, 0);
            int totalCustomers = waiter.getCurrentTable().getNumberCustomers();

            ArrayList<Customer> customers = waiter.getCurrentTable().getCustomerList();

            if ((waiter.getCurrentTable() != null) && (waiter.getCurrentTable() == customersTable) && (waiter.getWaiterStatus() == Waiter.waiterStatus.WAITING_AT_TABLE)) {

                if (amountOrderedCustomers < totalCustomers){

                    Customer currentCustomer = customers.get(amountOrderedCustomers);
                    ArrayList<Food> customerOrder = currentCustomer.orderToWaiter(waiter, currentCustomer.getTable());

                    System.out.println("Table order: " + currentCustomer.orderToWaiter(waiter, currentCustomer.getTable()));

                    processedCustomerCountMap.put(waiter.getCurrentTable(), amountOrderedCustomers+1);

                    if (currentTime - waiter.getCurrentTable().getWaitTimer() >= 2000){
                        customersTable.addOrderCount();
                    }



                }
                else {
                    if (waiter.getCurrentTable() == null){
                        processedCustomerCountMap.put(waiter.getCurrentTable(), 0);
                    }
                }
            }
        }

        for (Waiter w : waiters) {

            if (!TableQueue.isEmpty() && (tables.get(TableQueue.get(0)).getNumberCustomers() != 0)) {

                if (w.getWaiterStatus() == Waiter.waiterStatus.IDLE) {
                    w.setStatus(Waiter.waiterStatus.WALKING_TO_TABLE);
                    w.setCurrentTable(tables.get(TableQueue.get(0)));
                }

                if (w.getWaiterStatus() == Waiter.waiterStatus.WALKING_TO_TABLE) {
                    w.walkTo(w.getCurrentTable());
                }

                if (w.getWaiterStatus() == Waiter.waiterStatus.WAITING_AT_TABLE) {
                    w.getCurrentTable().resetWaitTimer();
                    showMessageBubble();
                    showTableMessageOrder = true;
                    w.getCurrentTable().setTableNameOrder();
                    w.receiveOrder(w.getCurrentTable().getCustomerList().get(0));

                    if (currentTime - w.getWaitTimer() >= 2000) {
                        w.setStatus(Waiter.waiterStatus.WALKING_TO_BASE);
                    }
                }

                if (w.getWaiterStatus() == Waiter.waiterStatus.WALKING_TO_BASE) {
                    w.walkToBase();

                    if (w.getCurrentTable() != null) {
                        w.getCurrentTable().resetTableName();
                        w.setCurrentTable(null);
                    }

                    if (w.isWaiterAtBase()) {
                        w.setStatus(Waiter.waiterStatus.IDLE);
                        TableQueue.remove(0);
                    }
                }
            }
        }
    }

    /**
     * Shows a temporary message bubble near the waiter to show order activity.
     * Uses a timer to hide the message after a short duration.
     */
    static void showMessageBubble() {
        showMessage = true;

        if (messageTimer != null) {
            messageTimer.stop();
        }

        messageTimer = new Timer(750, e -> {showMessage = false; messageTimer.stop(); });
        messageTimer.setRepeats(false);
        messageTimer.start();
    }

    /**
     * Paints the restaurant simulation GUI components
     * Called automatically by the Swing framework when the panel needs to be redrawn
     *
     * @param g Graphics context used for drawing
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        setBackground(new Color(255, 245, 158, 184)); //  // Set the background color to light yellow

        g.setColor(Color.DARK_GRAY); // Set the color for the borderlines
        g.drawRect(500, 0, 600, getHeight() - 5);
        //g.drawRect(800, 0, getWidth() - 5, getHeight() - 5);
        g.setColor(Color.BLACK);
        g.drawRect(500, 0, 695, getHeight() - 5);

        // Draw kitchen door
        g.setColor(Color.DARK_GRAY);
        g.fillRect(490, 270, 20, 100);
        g.fillRect(1090, 270, 20, 100);

        // Draw master chef office
        g.setColor(new Color(93, 191, 73, 255));
        g.fillRect(410, 200, 60, 200);




        // Draw the master chef
        g.setColor(Color.DARK_GRAY);
        g.fillOval(masterChef.getX(), masterChef.getY(), masterChef.getDiameter(), masterChef.getDiameter());
        g.setColor(Color.GRAY);
        g.fillOval(masterChef.getX()+3, masterChef.getY()+3, masterChef.getDiameter()-6, masterChef.getDiameter()-6); // Draw circle with diameter of 50 pixels


        // Draw the chefs' workplaces
        g.setColor(Color.LIGHT_GRAY);
        g.fillRect(0, 0, 50, 150); // Prepchef
        g.fillRect(50, 0, 100, 50);
        g.fillRect(350, 50, 100, 100); // Garde Manger
        g.fillRect(450, 445, 50, 150); // Patissier
        g.fillRect(50, 300, 75, 200); // Sous chef


        // Draw tables
        drawTables(g);

        // Draw the waiters
        drawWaiters(g);

        // Draw message
        drawMessage(g);

        // Draw chefs
        drawSousChef(g);

        drawPrepChef(g);

        drawPastryChef(g);

        drawAppetizerChef(g);

    }


    static void drawSousChef(Graphics g){
            g.setColor(Color.GRAY);
            g.fillOval(sousChef.getX(), sousChef.getY(), sousChef.getDiameter(), sousChef.getDiameter()); // Draw circle with diameter of 50 pixels
            g.setColor(Color.MAGENTA);
            g.fillOval(sousChef.getX()+3, sousChef.getY()+3, sousChef.getDiameter()-6, sousChef.getDiameter()-6); // Draw circle with diameter of 50 pixels
    }

    static void drawPrepChef(Graphics g){
        g.setColor(Color.GRAY);
        g.fillOval(prepChef.getX(), prepChef.getY(), prepChef.getDiameter(), prepChef.getDiameter()); // Draw circle with diameter of 50 pixels
        g.setColor(Color.GREEN);
        g.fillOval(prepChef.getX()+3, prepChef.getY()+3, prepChef.getDiameter()-6, prepChef.getDiameter()-6); // Draw circle with diameter of 50 pixels
    }

    static void drawPastryChef(Graphics g){
        g.setColor(Color.GRAY);
        g.fillOval(pastryChef.getX(), pastryChef.getY(), pastryChef.getDiameter(), pastryChef.getDiameter()); // Draw circle with diameter of 50 pixels
        g.setColor(Color.PINK);
        g.fillOval(pastryChef.getX()+3, pastryChef.getY()+3, pastryChef.getDiameter()-6, pastryChef.getDiameter()-6); // Draw circle with diameter of 50 pixels
    }

    static void drawAppetizerChef(Graphics g){
        g.setColor(Color.GRAY);
        g.fillOval(appetizerChef.getX(), appetizerChef.getY(), appetizerChef.getDiameter(), appetizerChef.getDiameter()); // Draw circle with diameter of 50 pixels
        g.setColor(Color.CYAN);
        g.fillOval(appetizerChef.getX()+3, appetizerChef.getY()+3, appetizerChef.getDiameter()-6, appetizerChef.getDiameter()-6); // Draw circle with diameter of 50 pixels
    }


    static void drawTables(Graphics g) {
        for (Table table : tables) {
            g.setColor(Color.RED);
            g.fillOval(table.getX(), table.getY(), table.getDiameter(), table.getDiameter()); // Draw circle with diameter of 50 pixels
            g.setColor(Color.WHITE);
            g.fillOval(table.getX()+3, table.getY()+3, table.getDiameter()-6, table.getDiameter()-6);
            g.setColor(Color.BLACK);
            g.drawString(String.valueOf(table.getTableLabel()), table.getX()+18,  table.getY()+40);
        }
    }


    static  void drawWaiters(Graphics g){
        for (Waiter waiter : waiters) {
            g.setColor(Color.BLACK);
            g.fillOval(waiter.getX(), waiter.getY(), waiter.getDiameter(), waiter.getDiameter()); // Draw circle with diameter of 50 pixels
            g.setColor(Color.WHITE);
            g.fillOval(waiter.getX()+7, waiter.getY()+7, waiter.getDiameter()-14, waiter.getDiameter()-14); // Draw circle with diameter of 50 pixels
        }
    }

    static void drawMessage(Graphics g){
        if (showMessage) {
            for (Message message : messages) {
                g.setColor(Color.BLACK);
                g.fillOval(Message.getX(waiters.get(0)), Message.getY(waiters.get(0)), message.getDiameter(), message.getDiameter()); // Draw circle with diameter of 50 pixels
                g.setColor(Color.WHITE);
                g.fillOval(Message.getX(waiters.get(0)) + 7, Message.getY(waiters.get(0)) + 7, message.getDiameter() - 14, message.getDiameter() - 14); // Draw circle with diameter of 50 pixels
                g.setColor(Color.BLACK);
                g.drawString(Message.orderMessage(), Message.getX(waiters.get(0)) + 10, Message.getY(waiters.get(0)) + 50);
            }
        }
    }

    /**
     * Main method starting the restaurant simulation.
     * Creates the window, sets up the restaurant, and enters the update-render loop.
     *
     * @param args command line arguments
     * @throws Exception if setup fails
     */
    public static void main(String[] args) throws Exception {
    // Create the frame
        JFrame frame = new JFrame("Restuarant Simulation");
        frame.setSize(1200, 640); // Set window size
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);

        // Add the custom panel (with circles) to the frame
        RestaurantMain panel = new RestaurantMain();
        frame.add(panel);

        // Display the window
        frame.setVisible(true);

        // Setup for the restaurant
        setupRestaurant();

        while (true) {
            try {
                Thread.sleep(33); // With the goal of having about 30 fps.
            } catch (Exception threadException) {
                System.out.println("Sleep exception: " + threadException.getMessage());
            }
            update();
            panel.repaint();
        }
    }
}
