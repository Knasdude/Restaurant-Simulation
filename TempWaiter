package org.example;
import javax.swing.plaf.nimbus.State;
import java.sql.SQLOutput;
import java.util.ArrayList;

import java.util.Objects;

public class Waiter {
    private int x;
    private int y;
    private final int diameter;
    private int walkSpeed;
    private int diagonalSpeed;
    private final int baseX = 520;
    private final int baseY = 300;

    private waiterStatus status = waiterStatus.IDLE;

    private boolean isWaiting = false;
    private long waitTimer;


    public Waiter(int x, int y) {
        this.x = x;
        this.y = y;
        this.diameter = 50;
        this.walkSpeed = 5;
    }

    public enum waiterStatus{
        IDLE, WALKING_TO_TABLE, WALKING_TO_BASE, WAITING_AT_TABLE,
    }

    public waiterStatus getWaiterStatus(){
        return status;
    }

    public void setStatus(waiterStatus newWaiterStatus){
        this.status = newWaiterStatus;
    }


    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public int getDiameter() {
        return diameter;
    }

    //orders för apetizer
    public String[] appetizerMenu() {
        String[] appMenu = {"Bread", "Salad"};
        return appMenu;
    }

    public String[] mainMenu() {
        String[] mainmenu = {"Pasta, Meatballs"};
        return mainmenu;
    }

    public String[] drinksMenu() {
        String[] drinkMenu = {"Water, Coca-Cola"};
        return drinkMenu;
    }

    public String[] desertMenu() {
        String[] deserMenu = {"Tiramisu, Chocolate Cake"};
        return deserMenu;
    }

    public void getOrder(Customer customer, Table table) {
        ArrayList<String> currentOrder = Customer.order(this, table);
        System.out.println("Ord. till waiter: " + currentOrder);
    }

    public void deliverOrder() {
        System.out.println("Fix deliver order to kitchen");
    }

    public void walk() {
        x += walkSpeed;
        y += walkSpeed;

        if (x >= 200) {
            walkSpeed = -5;
        }

        if (y >= 200) {
            walkSpeed = -5;
        }
    }

    public int WaiterTablePosX(Table table) {
        return table.getX();
    }


    public int WaiterTablePosY(Table table) {
        if ((Objects.equals(table.getTableLabel(), "1")) || (Objects.equals(table.getTableLabel(), "2")) || (Objects.equals(table.getTableLabel(), "3"))) {
            return table.getY() + 80;
        } else {
            return table.getY() - 80;
        }
    }

    public void walkToBase() {
        if (x < baseX) {
            this.x = this.x + walkSpeed;
        } else if (this.x > baseX) {
            this.x = this.x - walkSpeed; //walkspeed = 5
            //System.out.println(this.x);
        }

        if (this.y < baseY) {
            this.y = this.y + walkSpeed;
        } else if (this.y > baseY) {
            this.y = this.y - walkSpeed;
            //System.out.println(this.y);
        }
    }

    public boolean isWaiterAtTable(Table table) {
        return (Math.abs(x - WaiterTablePosX(table)) <= walkSpeed) && (Math.abs(y - WaiterTablePosY(table)) <= walkSpeed);
    }

    public boolean isWaiterAtBase(){
        return (Math.abs(x - 520) <= walkSpeed) && (Math.abs(y - 300) <= walkSpeed);
    }

    public void walkTo(Table table) throws InterruptedException {

        diagonalSpeed = 2; //Fix diagonal speed för jämn hastighet
        boolean walkToBaseCheck = true;

        int TablePosX = WaiterTablePosX(table);
        int TablePosY = WaiterTablePosY(table);

        //om waiter vid bord och om han inte väntar -> han börjar vänta och tidtagare börjar
        if (isWaiterAtTable(table) == true && (isWaiting == false)) {
            isWaiting = true;
            waitTimer = System.currentTimeMillis();
            return;
        }

        if (isWaiting == true) { //Denna förblir true även om waiter lämnar table
            long currentTime = System.currentTimeMillis();
            long totalTime = currentTime - waitTimer;

            //System.out.println(totalTime);
            //System.out.println("Tid gått " + totalTime);

            if (totalTime >= 2000) {
                //Fixa TimeUnit.SECONDS så waiter hinner bort
                if (walkToBaseCheck == true) {
                    walkToBase();
                    walkToBaseCheck = false;
                } //countdown nr2 ställs om efter isWaiting = false;
            }
        }

        if ((isWaiting == false) && (walkToBaseCheck == true)) {

            walkSpeed = 5;
            if (x < TablePosX) {
                x += walkSpeed;
                //System.out.println("Waiter påväg till bord");
            } else if (x > TablePosX) {
                x -= walkSpeed;
            }

            if (y < TablePosY) {
                //if (x == TablePosX){
                y += walkSpeed;
                //System.out.println("Waiter påväg till bord");
            } else if (y > TablePosY) {
                y -= walkSpeed;
            }
        }
    }
}



    /*
    public void walkTo(Table table) {
        int TablePosX = WaiterTablePosX(table);
        int TablePosY = WaiterTablePosY(table);

        if (isWaiterAtTable(table) && ) {
            walkSpeed = 0;
            Timer timer = new Timer(1000, e -> walkToBase());
            timer.setRepeats(false);
            timer.start();
            System.out.println("Waiter är vid bordet");
            return;
        }

        walkSpeed = 5;
        if (x < TablePosX) {
            x += walkSpeed;
            System.out.println("Waiter påväg till bord");
        } else if (x > TablePosX) {
            x -= walkSpeed;
        }

        if (y < TablePosY) {
            y += walkSpeed;
            System.out.println("Waiter påväg till bord");
        } else if (y > TablePosY) {
            y -= walkSpeed;
        }
        //orders för mainCourse
        //orders för desertMenu
    }
     */
