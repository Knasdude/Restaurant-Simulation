package org.example;

import java.util.ArrayList;


/**
 * Represents a PastryChef in the kitchen simulation.
 * The PastryChef is responsible for handling dessert orders, moving between its station and the MasterChef,
 * and maintaining a list of food items it is cooking or has completed.
 * Implements both the Chef and ChefObserver interfaces.
 */


public class PastryChef implements Chef, ChefObserver{
    private int x;
    private int y;
    private int walkSpeed;
    private final int diameter;
    private final int baseX = 290;
    private final int baseY = 80;
    private MasterChef masterChef;
    private long waitTimer;
    private ArrayList<Food> cookingList;
    private ArrayList<Food> doneDishes;

    private PastryChefStatus status = PastryChefStatus.IDLE;


    /**
     * Enum representing the current status of the PastryChef.
     */

    public enum PastryChefStatus{ //FIXA ENUM VARIABLES
        IDLE, WALKING_TO_MASTER_CHEF, RECEIVING_ORDER, WALKING_TO_STATION, COOKING,
    }

    /**
     * Constructs a PastryChef with given coordinates and a reference to the MasterChef
     *
     * @param x the starting x position
     * @param y the starting y position
     * @param mc reference to the MasterChef
     */

    public PastryChef(int x, int y, MasterChef mc) {
        this.x = x;
        this.y = y;
        this.diameter = 40;
        this.walkSpeed = 1;
        this.masterChef = mc;
        this.cookingList = new ArrayList<>();
        this.doneDishes = new ArrayList<>();
    }

    /**
     * Returns the current status of the PastryChef.
     *
     * @return the current PastryChefStatus
     */

    public PastryChefStatus getPastryChefStatus(){
        return status;
    }

    /**
     * Updates the status of the PastryChef.
     *
     * @param newPastryChefStatus the new status
     */

    public void setStatus(PastryChefStatus newPastryChefStatus){
        this.status = newPastryChefStatus;
    }

    /**
     * Returns the list of food items currently being cooked by the PastryChef.
     *
     * @return the cooking list
     */

    public ArrayList<Food> getCookingList(){
        return cookingList;
    }

    /**
     * Returns the list of food items completed by the PastryChef.
     *
     * @return the list of done dishes
     */

    public ArrayList<Food> getDoneDishes(){
        return doneDishes;
    }

    /**
     * Returns the current x position of the PastryChef.
     *
     * @return the x coordinate
     */
    public int getX() {
        return x;
    }

    /**
     * Returns the current y position of the PastryChef.
     *
     * @return the y coordinate
     */
    public int getY() {
        return y;
    }


    /**
     * Returns the diameter of the PastryChef.
     *
     * @return the diameter
     */
    public int getDiameter() {
        return diameter;
    }

    /**
     * Called when a new order is received from the MasterChef and is added to pastryChef cookingList.
     * Updates the PastryChef's status to COOKING.
     *
     * @param order the list of food items in the order
     */
    @Override
    public void update(ArrayList<Food> order) {
        System.out.println("PrepChef received order: " + order);

        cookingList.addAll(order);

        this.setStatus(PastryChefStatus.COOKING);
    }

    /**
     * Returns the x position where the PastryChef meets the MasterChef
     *
     * @param masterChef the MasterChef
     * @return target x coordinate
     */
    public int masterChefPosX(MasterChef masterChef){
        return masterChef.getX()-50;
    }

    /**
     * Returns the y position where the PastryChef meets the MasterChef
     *
     * @param masterChef the MasterChef
     * @return target y coordinate
     */
    public int masterChefPosY(MasterChef masterChef){
        return masterChef.getY()-30;
    }

    /**
     * Checks if the PastryChef is at the MasterChef's location
     *
     * @return true if close to MasterChef, false otherwise
     */

    public boolean isAtMasterChef(){
        return (Math.abs(x - masterChefPosX(masterChef)) <= walkSpeed) && (Math.abs(y - masterChefPosY(masterChef)) <= walkSpeed);
    }

    /**
     * Checks if the PastryChef is at its base station.
     *
     * @return true if at base, false otherwise
     */

    public boolean isChefAtBase(){
        return (Math.abs(x - baseX) <= walkSpeed) && (Math.abs(y - baseY) <= walkSpeed);
    }

    /**
     * Returns the current wait timer value.
     *
     * @return the wait timer timestamp
     */
    public long getWaitTimer(){
        return waitTimer;
    }

    /**
     * Resets the wait timer to the current system time.
     */
    public void resetWaitTimer(){
        waitTimer = System.currentTimeMillis();
    }



    @Override
    public void walkTo(MasterChef masterChef) throws InterruptedException {

        int MasterChefPosX = masterChefPosX(masterChef);
        int MasterChefPosY = masterChefPosY(masterChef);


        if (y < MasterChefPosY) {
            y += walkSpeed;
        } else if (y > MasterChefPosY) {
            y -= walkSpeed;
        }


        if (x < MasterChefPosX) {
            x += walkSpeed;
        } else if (x > MasterChefPosX) {
            x -= walkSpeed;
        }


        if (isAtMasterChef()) {
            setStatus(PastryChefStatus.RECEIVING_ORDER);
            waitTimer = System.currentTimeMillis();

        }
    }






    public void walkToBase() {
        if (x < baseX) {
            this.x = this.x + walkSpeed;
        } else if (this.x > baseX) {
            this.x = this.x - walkSpeed; //walkspeed = 5
        }

        if (this.y < baseY) {
            this.y = this.y + walkSpeed;
        } else if (this.y > baseY) {
            this.y = this.y - walkSpeed;
        }
    }
}
